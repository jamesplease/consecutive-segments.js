{"version":3,"sources":["consecutive-segments.js"],"names":[],"mappings":"AAAA,AAAC,CAAA,UAAU,QAAQ,SAAS;AAC1B,SAAO,YAAY,YAAY,OAAO,WAAW,cAAc,OAAO,UAAU,QAAQ,QAAQ,eAAe,QAAQ,aACvH,OAAO,WAAW,cAAc,OAAO,MAAM,OAAO,CAAC,cAAc,WAAW,WAC9E,OAAO,sBAAsB,QAAQ,OAAO,GAAG,OAAO;GACtD,MAAM,UAAU,GAAG,QAAQ;AAAE;;AAE7B,MAAI,sBAAsB,UAAS,UAAyB;QAAf,qCAAM;AACjD,QAAI,EAAE,QAAQ,WAAW;AAAE,aAAO;;;AAElC,QAAI,eAAe;QAAG;QAAe;AACrC,WAAO,EAAE,MAAM,UACZ,IAAI,UAAC,QAAQ,WAAc;AAC1B,aAAO,EAAE,WAAA,WAAW,QAAA;OAErB,OAAO,UAAC,MAAM,GAAG,OAAO,UAAa;;;;;AAMpC,UAAI,OAAO;AACT,wBAAgB,OAAO,KAAK,EAAE,WAAW;AACzC,qBAAa,OAAO,KAAK,SAAS,QAAQ,GAAG,WAAW;AACxD,YAAI,cAAc,KAAK,YAAY,SAAS,GAAG;AAC7C;;;;;AAKJ,UAAI,CAAC,KAAK,eAAe;AACvB,aAAK,gBAAgB;;AAEvB,WAAK,cAAc,KAAK,EAAE,MAAM;AAChC,aAAO;OACN,IACF;;;AAGL,MAAI,uBAAuB;;AAE3B,SAAO","file":"consecutive-segments.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('underscore'), require('moment')) :\n  typeof define === 'function' && define.amd ? define(['underscore', 'moment'], factory) :\n  global.consecutiveSegments = factory(global._, global.moment)\n}(this, function (_, moment) { 'use strict';\n\n  var consecutiveSegments = function(segments, scale='weeks') {\n    if (_.isEmpty(segments)) { return []; }\n\n    let currentGroup = 0, currentMoment, prevMoment;\n    return _.chain(segments)\n      .map((events, timestamp) => {\n        return { timestamp, events };\n      })\n      .reduce((memo, s, index, segments) => {\n\n        // Check to see if the current group is the same\n        // as the previous group by computing the difference\n        // in their timestamps. They aren't consecutive when\n        // the difference is > 1\n        if (index) {\n          currentMoment = moment.unix(s.timestamp).utc();\n          prevMoment = moment.unix(segments[index - 1].timestamp).utc();\n          if (currentMoment.diff(prevMoment, scale) > 1) {\n            currentGroup++;\n          }\n        }\n\n        // Ensure that the group exists, then push to it\n        if (!memo[currentGroup]) {\n          memo[currentGroup] = [];\n        }\n        memo[currentGroup].push(_.clone(s));\n        return memo;\n      }, [])\n      .value();\n  };\n\n  var consecutive_segments = consecutiveSegments;\n\n  return consecutive_segments;\n\n}));\n"],"sourceRoot":"/source/"}